正则表达式
    动机
        文本处理已经成为计算机的常见工作之一
        对文本内容的搜索，定位，提取是逻辑比较复杂的工作
    定义
        即文本的高级匹配模式，提供搜索，替换等功能。其本质是由一系列字符和特殊符号构成的字串
    原理
        通过普通字符和有特定含义的字符来组成字符串，用以描述一定的字符串规则。比如：重复，位置等，
        来表达某类特定的字符串，进而匹配

    普通字符
        每个普通字符匹配其对应的字符
    或关系
        元字符：|
        匹配|两侧任意的正则表达式即可
    匹配单个字符
        元字符：.
        匹配除换行外的任意一个字符
    匹配字符集
        元字符：[字符集]
        匹配字符集中的任意一个字符
        表达形式：
            [abc#!好] 表示[]中任意一个字符
            [0-9],[a-z],[A-Z] 表示区间内的任意一个字符
            [_#0-9] 混合书写，一般区间表达写在后面
    匹配字符集反集
        元字符：[^字符集]
        匹配除了字符集以外的任意一个字符
    匹配字符串开始位置
        元字符：^
        匹配目标字符串的开头位置
    匹配字符串的结束位置
        元字符：$
        匹配目标字符串的结尾位置

    匹配字符重复
        元字符：*
        匹配前面的字符出现0次或多次

        元字符：+
        匹配前面的字符出现1次或多次

        元字符：？
        匹配前面的字符出现0次或一次

        元字符：{n}
        匹配前面的字符出现n次

        元字符：{m,n}
        匹配前面的字符出现m-n次

    匹配任意（非）数字字符
        元字符：\d \D
        \d匹配任意数字字符[0-9]，\D匹配任意非数字字符[^0-9]

    匹配任意（非）普通字符---数字，字母，下划线，汉字
        元字符：\w普通字符 \W

    匹配任意（非）空字符----空格 \r（回车符） \n（换行） \t（tap键） \v \f
        元字符：\s空格 \S

    匹配开头结尾位置---^  $
        元字符：\A \Z

    匹配（非）单词（\w）的边界位置
        元字符：\b单词边界 \B表示非单词边界
        单词边界指数字字母（汉字）下划线与其他字符的交界位置

正则表达式的转义
    如果使用正则表达式匹配特殊字符需要加\转义
    在编程语言中使用原生字符串书写正则表达式避免多重转义的麻烦 r

贪婪和非贪婪模式
    贪婪模式：默认情况下，匹配重复的元字符总是尽可能多的向后匹配内容
            比如：*+？{m,n}
    非贪婪模式（懒惰模式）：让匹配重复的元字符尽可能少的向后匹配内容
            在匹配重复元字符后面加？

正则表达式分组()
    改变元字符操作对象
    re.search().group()  只能匹配第一个符合条件的

    可以通过编程语言某些接口获取子组对应的内容

    捕获组
        可以给正则表达式的子组起一个名字，表达该子组的意义
        格式(?P<name>pattern)

re模块
    regex = compile(pattern,flags = 0)
    功能：生成正则表达式对象
        pattern 正则表达式
        flags 扩展正则表达式的匹配  比如让大小写互相匹配

    findall
    功能：根据正则表达式匹配目标字符串所有内容
    返回值：匹配到的内容列表，如果正则表达式有子组则只能获取到子组的内容
    regex.findall(string,pos,endpos)
        pos 截取目标字符串的开始匹配位置
        endpos 截取目标字符串的结束匹配位置

    re.split(pattern,string,flags = 0)
    功能：使用正则表达式匹配内容，切割目标字符串
    返回值：切割后的内容列表

    re.sub(pattern,replace,string,max,flags = 0)
    功能：使用一个字符串替换正则表达式匹配到的内容
    max 最多替换几处，默认全部
    返回值：替换后的字符串

    re.subn
    同上
    返回值：替换后的字符串，替换了几处

    ------生成match对象-----------

    re.finditer(pattern,string,flags = 0)
    功能：根据正则表达式匹配目标字符串内容
    返回值：匹配结果的迭代器

    re.fullmatch(pattern,string,flags=0)
    功能：完全匹配某个目标字符串  类似于^pattern$
    # 完全匹配指正则表达式要把字符串所有内容都匹配出来
    返回值：匹配内容match object

    re.match()
    匹配某个目标字符串开始位置  类似于^
    返回匹配内容match object

    re.search()
    匹配目标字符串第一个符合内容

flags参数扩展
    re模块调用的匹配函数一般都有这个参数

    A == ASCII元字符只能匹配ascii码
    I == IGNORECASE 忽略字母大小写
    S == DOTALL 使.可以匹配换行
    M == MULTILINE 使^$可以匹配每一行的开头结尾位置
    X == VERBOSE 为正则添加注释
